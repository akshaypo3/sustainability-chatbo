name: Build & Deploy to SAP AI Core

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    # Checkout repo
    - name: Checkout repo
      uses: actions/checkout@v3

    # Debug: Check all secrets are set
    - name: Check required secrets
      run: |
        echo "Checking if all required secrets are set..."
        REQUIRED_SECRETS=("AI_API_URL" "AUTH_URL" "CLIENT_ID" "CLIENT_SECRET" "DOCKERHUB_USERNAME" "DOCKERHUB_TOKEN" "SUPABASE_URL" "SUPABASE_KEY" "GEMINI_API_KEY")
        
        ALL_SECRETS_SET=true
        for secret in "${REQUIRED_SECRETS[@]}"; do
          secret_value=$(printenv "$secret" || true)
          if [ -n "$secret_value" ]; then
            echo "✓ $secret is set"
          else
            echo "✗ $secret is NOT set or empty"
            ALL_SECRETS_SET=false
          fi
        done
        
        if [ "$ALL_SECRETS_SET" = false ]; then
          echo ""
          echo "ERROR: Missing required secrets!"
          echo "Please go to: Repository Settings → Secrets and variables → Actions"
          echo "Add the following secrets:"
          echo "  - AI_API_URL, AUTH_URL, CLIENT_ID, CLIENT_SECRET"
          echo "  - DOCKERHUB_USERNAME, DOCKERHUB_TOKEN"
          echo "  - SUPABASE_URL, SUPABASE_KEY, GEMINI_API_KEY"
          echo ""
          echo "Get these values from your SAP BTP service key and other services"
          exit 1
        fi

        echo "All secrets are set correctly!"

    # Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    # Install jq for JSON parsing
    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y jq curl

    # Log in to DockerHub
    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Build Docker image
    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/sustainability-chatbo:latest .

    # Push Docker image
    - name: Push Docker image
      run: |
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/sustainability-chatbo:latest

    # Debug: Check authentication URL format
    - name: Prepare authentication URL
      run: |
        echo "Original AUTH_URL: ${{ secrets.AUTH_URL }}"
        # Ensure the URL has /oauth/token suffix
        if [[ "${{ secrets.AUTH_URL }}" == *"/oauth/token" ]]; then
          echo "AUTH_URL_WITH_SUFFIX=${{ secrets.AUTH_URL }}" >> $GITHUB_ENV
        else
          echo "AUTH_URL_WITH_SUFFIX=${{ secrets.AUTH_URL }}/oauth/token" >> $GITHUB_ENV
        fi
        echo "Using AUTH_URL: $AUTH_URL_WITH_SUFFIX"

    # Deploy to SAP AI Core using Direct API
    - name: Deploy to SAP AI Core via API
      run: |
        # Get access token with better error handling
        echo "Getting access token from SAP..."
        echo "Using Auth URL: $AUTH_URL_WITH_SUFFIX"
        
        TOKEN_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST "$AUTH_URL_WITH_SUFFIX" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "grant_type=client_credentials&client_id=${{ secrets.CLIENT_ID }}&client_secret=${{ secrets.CLIENT_SECRET }}")
        
        # Extract HTTP status and response body
        HTTP_STATUS=$(echo "$TOKEN_RESPONSE" | grep "HTTP_STATUS:" | cut -d':' -f2)
        RESPONSE_BODY=$(echo "$TOKEN_RESPONSE" | sed '/HTTP_STATUS:/d')
        
        echo "HTTP Status: $HTTP_STATUS"
        echo "Response: $RESPONSE_BODY"
        
        if [ "$HTTP_STATUS" != "200" ]; then
          echo "ERROR: Failed to get access token. HTTP Status: $HTTP_STATUS"
          echo "Please check:"
          echo "1. AUTH_URL is correct (should be like: https://<your-domain>.authentication.<region>.hana.ondemand.com/oauth/token)"
          echo "2. CLIENT_ID and CLIENT_SECRET are correct"
          echo "3. Your service key has proper permissions"
          exit 1
        fi
        
        ACCESS_TOKEN=$(echo "$RESPONSE_BODY" | jq -r '.access_token')
        
        if [ "$ACCESS_TOKEN" = "null" ] || [ -z "$ACCESS_TOKEN" ]; then
          echo "ERROR: Failed to extract access token from response"
          exit 1
        fi
        
        echo "Successfully obtained access token"

        # Create secrets using API (rest of the deployment code remains the same)
        echo "Creating Supabase secret..."
        # ... [rest of your deployment code]