name: Build & Deploy to SAP AI Core

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout
      - name: Checkout repo
        uses: actions/checkout@v3

      # 2) Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3) Build Docker image
      - name: Build Docker image
        run: |
          docker build -t akshay1p1/sustainability-chatbo:latest .

      # 4) Push Docker image
      - name: Push Docker image
        run: |
          docker push akshay1p1/sustainability-chatbo:latest

      # 5) Install tools
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl
          pip install --user ai-core-sdk

      # 6) Get OAuth token from SAP BTP (XSUAA)
      - name: Get AI Core OAuth Token
        id: get_token
        env:
          AUTH_URL: ${{ secrets.AUTH_URL }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        run: |
          response=$(curl -s -X POST "$AUTH_URL" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=client_credentials&client_id=$CLIENT_ID&client_secret=$CLIENT_SECRET")
          echo "Token response:"
          echo "$response" | jq .
          token=$(echo "$response" | jq -r '.access_token')
          if [ -z "$token" ] || [ "$token" = "null" ]; then
            echo "Failed to get access_token from AUTH_URL"; exit 1;
          fi
          echo "AICORE_TOKEN=$token" >> $GITHUB_ENV

      # 7) Validate AI Core API connectivity and check resource groups
      - name: Validate AI Core API connectivity
        env:
          AI_API_URL: ${{ secrets.AI_API_URL }}
          AICORE_TOKEN: ${{ env.AICORE_TOKEN }}
          RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
        run: |
          echo "Listing available resource groups..."
          response=$(curl -s -H "Authorization: Bearer $AICORE_TOKEN" \
                         "$AI_API_URL/v2/resourceGroups")
          echo "Resource groups response:"
          echo "$response" | jq .
          
          if echo "$response" | jq -e ".resources[] | select(.name == \"$RESOURCE_GROUP\")" > /dev/null; then
            echo "Resource group '$RESOURCE_GROUP' exists."
          else
            echo "ERROR: Resource group '$RESOURCE_GROUP' not found!"
            echo "Available resource groups:"
            echo "$response" | jq -r '.resources[].name'
            exit 1
          fi

       # 8) Apply the deployment configuration
      - name: Deploy to SAP AI Core
        env:
          AI_API_URL: ${{ secrets.AI_API_URL }}
          AICORE_TOKEN: ${{ env.AICORE_TOKEN }}
          RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
        run: |
          echo "Deploying serving template to resource group: $RESOURCE_GROUP"
          
          response=$(curl -s -X POST \
            -H "Authorization: Bearer $AICORE_TOKEN" \
            -H "Content-Type: application/yaml" \
            -H "AI-Resource-Group: $RESOURCE_GROUP" \
            --data-binary "@deploy/sap_ai_core_deployment.yaml" \
            "$AI_API_URL/v2/lm/servingtemplates")
          
          echo "Deployment response:"
          echo "$response" | jq .
          
          if echo "$response" | jq -e '.name' > /dev/null; then
            echo "Deployment successful!"
            
            echo "Waiting 30 seconds for deployment to initialize..."
            sleep 30
            

            DEPLOYMENT_NAME="sustainability-chatbot-serving"
            STATUS_RESPONSE=$(curl -s -H "Authorization: Bearer $AICORE_TOKEN" \
                                  -H "AI-Resource-Group: $RESOURCE_GROUP" \
                                  "$AI_API_URL/v2/lm/servings/$DEPLOYMENT_NAME")
            
            echo "Deployment status:"
            echo "$STATUS_RESPONSE" | jq .
            

            URL=$(echo "$STATUS_RESPONSE" | jq -r '.status.url // empty')
            if [ -n "$URL" ] && [ "$URL" != "null" ]; then
              echo "ðŸš€ Deployment URL: $URL"
              echo "DEPLOYMENT_URL=$URL" >> $GITHUB_ENV
            else
              echo " URL not available yet. Check SAP AI Core console for status."
              echo "Note: It can take several minutes for the URL to become available."
            fi
            
          else
            echo " Deployment failed!"
            exit 1
          fi
      # 9) Output deployment information
      - name: Print deployment details
        run: |
          echo "=============================================="
          echo " DEPLOYMENT COMPLETED"
          echo "=============================================="
          echo "Container image: docker.io/akshay1p1/sustainability-chatbo:latest"
          echo "Resource group: ${{ secrets.RESOURCE_GROUP }}"
          if [ -n "$DEPLOYMENT_URL" ]; then
            echo "Deployment URL: $DEPLOYMENT_URL"
          else
            echo "Deployment URL: Check SAP AI Core console for URL"
          fi
          echo "=============================================="