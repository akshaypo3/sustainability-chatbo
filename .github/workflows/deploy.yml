name: Build & Deploy to SAP AI Core

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    # Checkout repo
    - name: Checkout repo
      uses: actions/checkout@v3

    # Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    # Install jq for JSON parsing
    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y jq curl

    # Log in to DockerHub
    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Build Docker image
    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/sustainability-chatbo:latest .

    # Push Docker image
    - name: Push Docker image
      run: |
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/sustainability-chatbo:latest

    # Deploy to SAP AI Core using Direct API
    - name: Deploy to SAP AI Core via API
      run: |
        # Get access token
        echo "Getting access token from SAP..."
        TOKEN_RESPONSE=$(curl -s -X POST "${{ secrets.AUTH_URL }}" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "grant_type=client_credentials&client_id=${{ secrets.CLIENT_ID }}&client_secret=${{ secrets.CLIENT_SECRET }}")
        
        ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.access_token')
        
        if [ "$ACCESS_TOKEN" = "null" ] || [ -z "$ACCESS_TOKEN" ]; then
          echo "Failed to get access token. Response: $TOKEN_RESPONSE"
          exit 1
        fi
        
        echo "Successfully obtained access token"
        
        # Create secrets using API
        echo "Creating Supabase secret..."
        SUPABASE_SECRET_DATA=$(jq -n \
          --arg url "${{ secrets.SUPABASE_URL }}" \
          --arg key "${{ secrets.SUPABASE_KEY }}" \
          '{"SUPABASE_URL": $url, "SUPABASE_KEY": $key}')
        
        curl -X POST "${{ secrets.AI_API_URL }}/v2/admin/secrets" \
          -H "Authorization: Bearer $ACCESS_TOKEN" \
          -H "Content-Type: application/json" \
          -d "{
            \"name\": \"supabase-secret\",
            \"data\": $SUPABASE_SECRET_DATA,
            \"labels\": {\"ai.sap.com/resourcePlan\": \"free\"}
          }"
        
        echo "Creating Gemini secret..."
        GEMINI_SECRET_DATA=$(jq -n \
          --arg key "${{ secrets.GEMINI_API_KEY }}" \
          '{"GEMINI_API_KEY": $key}')
        
        curl -X POST "${{ secrets.AI_API_URL }}/v2/admin/secrets" \
          -H "Authorization: Bearer $ACCESS_TOKEN" \
          -H "Content-Type: application/json" \
          -d "{
            \"name\": \"gemini-secret\",
            \"data\": $GEMINI_SECRET_DATA,
            \"labels\": {\"ai.sap.com/resourcePlan\": \"free\"}
          }"
        
        echo "Creating Docker registry secret..."
        DOCKER_AUTH=$(echo -n "${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_TOKEN }}" | base64 | tr -d '\n')
        DOCKER_CONFIG=$(jq -n \
          --arg server "https://index.docker.io/v1/" \
          --arg username "${{ secrets.DOCKERHUB_USERNAME }}" \
          --arg password "${{ secrets.DOCKERHUB_TOKEN }}" \
          --arg auth "$DOCKER_AUTH" \
          '{
            "auths": {
              ($server): {
                "username": $username,
                "password": $password,
                "auth": $auth
              }
            }
          }')
        
        curl -X POST "${{ secrets.AI_API_URL }}/v2/admin/secrets" \
          -H "Authorization: Bearer $ACCESS_TOKEN" \
          -H "Content-Type: application/json" \
          -d "{
            \"name\": \"docker-registry-secret\",
            \"type\": \"kubernetes.io/dockerconfigjson\",
            \"data\": $DOCKER_CONFIG,
            \"labels\": {\"ai.sap.com/resourcePlan\": \"free\"}
          }"
        
        # Create workflow template
        echo "Creating workflow template..."
        
        # Read and modify the workflow template
        WORKFLOW_TEMPLATE=$(cat sap_ai_core_deployment.yaml | sed -n '/^apiVersion: argoproj.io\/v1alpha1/,/^---$/p' | head -n -1)
        
        curl -X POST "${{ secrets.AI_API_URL }}/v2/admin/workflowtemplates" \
          -H "Authorization: Bearer $ACCESS_TOKEN" \
          -H "Content-Type: application/yaml" \
          --data-binary "$WORKFLOW_TEMPLATE"
        
        # Create deployment
        echo "Creating deployment..."
        
        # Read and modify the deployment manifest
        DEPLOYMENT_MANIFEST=$(cat sap_ai_core_deployment.yaml | sed -n '/^apiVersion: ai.sap.com\/v1alpha1/,/$/p')
        
        curl -X POST "${{ secrets.AI_API_URL }}/v2/lm/deployments" \
          -H "Authorization: Bearer $ACCESS_TOKEN" \
          -H "Content-Type: application/yaml" \
          --data-binary "$DEPLOYMENT_MANIFEST"
        
        echo "Deployment completed successfully!"

    # Verify deployment
    - name: Verify Deployment
      run: |
        # Get access token again for verification
        TOKEN_RESPONSE=$(curl -s -X POST "${{ secrets.AUTH_URL }}" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "grant_type=client_credentials&client_id=${{ secrets.CLIENT_ID }}&client_secret=${{ secrets.CLIENT_SECRET }}")
        
        ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.access_token')
        
        # Check deployment status
        echo "Checking deployment status..."
        curl -s -X GET "${{ secrets.AI_API_URL }}/v2/lm/deployments" \
          -H "Authorization: Bearer $ACCESS_TOKEN" | jq .
        
        echo -e "\nDeployment process completed!"
        echo "Check your SAP AI Core cockpit for detailed status."