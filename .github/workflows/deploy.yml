name: Build & Deploy to SAP AI Core

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    # Checkout repo
    - name: Checkout repo
      uses: actions/checkout@v3

    # Debug: Check what's actually in the secrets (without revealing values)
    - name: Debug Secrets
      run: |
        echo "=== DEBUGGING SECRETS ==="
        
        # List all secrets and check if they contain values
        secrets=("AI_API_URL" "AUTH_URL" "CLIENT_ID" "CLIENT_SECRET" "DOCKERHUB_USERNAME" "DOCKERHUB_TOKEN" "SUPABASE_URL" "SUPABASE_KEY" "GEMINI_API_KEY")
        
        echo "Checking if secrets are properly set..."
        echo ""
        
        for secret in "${secrets[@]}"; do
          # Use env to check if secret exists without printing value
          if env | grep -q "^${secret}="; then
            secret_value=$(printenv "$secret")
            # Show first few characters to verify format without exposing full values
            preview="${secret_value:0:10}..."
            length=${#secret_value}
            
            echo "✓ $secret: EXISTS (length: $length chars, starts with: '$preview')"
            
            # Check for common issues
            if [ -z "$secret_value" ]; then
              echo "   ❌ PROBLEM: Secret is empty!"
            elif [ "$secret_value" = "your-$secret-value-here" ]; then
              echo "   ❌ PROBLEM: You used the placeholder text!"
            elif [[ "$secret_value" == *"example.com"* ]] || [[ "$secret_value" == *"placeholder"* ]]; then
              echo "   ❌ PROBLEM: You used example/placeholder text!"
            fi
            
          else
            echo "✗ $secret: NOT FOUND in environment"
          fi
          echo ""
        done

        # Additional checks for common SAP issues
        echo "=== SAP SPECIFIC CHECKS ==="
        if [ -n "$AUTH_URL" ]; then
          if [[ "$AUTH_URL" != *"/oauth/token" ]]; then
            echo "⚠️  AUTH_URL might need '/oauth/token' suffix"
            echo "   Current: $AUTH_URL"
            echo "   Should be: ${AUTH_URL}/oauth/token"
          fi
          
          if [[ "$AUTH_URL" != *"https://"* ]]; then
            echo "❌ AUTH_URL must start with https://"
          fi
        fi
        
        if [ -n "$AI_API_URL" ]; then
          if [[ "$AI_API_URL" != *"https://"* ]]; then
            echo "❌ AI_API_URL must start with https://"
          fi
        fi
        
        echo ""
        echo "=== QUICK FIXES ==="
        echo "If any secrets show problems:"
        echo "1. Go to Repository Settings → Secrets → Actions"
        echo "2. Delete the problematic secret"
        echo "3. Re-add it with the correct value"
        echo "4. Make sure you're copying from your actual service key, not examples"

    # Only continue if secrets are valid
    - name: Validate Secrets
      run: |
        # Check if any critical secrets are missing or empty
        critical_secrets=("AI_API_URL" "AUTH_URL" "CLIENT_ID" "CLIENT_SECRET")
        has_error=false
        
        for secret in "${critical_secrets[@]}"; do
          secret_value=$(printenv "$secret" || true)
          if [ -z "$secret_value" ]; then
            echo "❌ CRITICAL ERROR: $secret is empty or not set!"
            has_error=true
          elif [[ "$secret_value" == *"example"* ]] || [[ "$secret_value" == *"placeholder"* ]]; then
            echo "❌ CRITICAL ERROR: $secret contains example text!"
            has_error=true
          fi
        done
        
        if [ "$has_error" = true ]; then
          echo ""
          echo "Please fix the secrets above and try again."
          exit 1
        fi
        
        echo "✓ All critical secrets appear to be valid"

    # Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    # Install jq for JSON parsing
    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y jq curl

    # Log in to DockerHub
    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Build Docker image
    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/sustainability-chatbo:latest .

    # Push Docker image
    - name: Push Docker image
      run: |
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/sustainability-chatbo:latest

    # Prepare authentication URL
    - name: Prepare authentication URL
      run: |
        echo "Original AUTH_URL: ${{ secrets.AUTH_URL }}"
        # Ensure the URL has /oauth/token suffix
        if [[ "${{ secrets.AUTH_URL }}" == *"/oauth/token" ]]; then
          echo "AUTH_URL_WITH_SUFFIX=${{ secrets.AUTH_URL }}" >> $GITHUB_ENV
        else
          echo "AUTH_URL_WITH_SUFFIX=${{ secrets.AUTH_URL }}/oauth/token" >> $GITHUB_ENV
        fi
        echo "Using AUTH_URL: $AUTH_URL_WITH_SUFFIX"

    # Deploy to SAP AI Core using Direct API
    - name: Deploy to SAP AI Core via API
      run: |
        echo "Testing authentication with provided credentials..."
        echo "Auth URL: $AUTH_URL_WITH_SUFFIX"
        echo "Client ID: ${{ secrets.CLIENT_ID }}"
        
        # Get access token
        TOKEN_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST "$AUTH_URL_WITH_SUFFIX" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "grant_type=client_credentials&client_id=${{ secrets.CLIENT_ID }}&client_secret=${{ secrets.CLIENT_SECRET }}")
        
        # Extract HTTP status and response body
        HTTP_STATUS=$(echo "$TOKEN_RESPONSE" | grep "HTTP_STATUS:" | cut -d':' -f2)
        RESPONSE_BODY=$(echo "$TOKEN_RESPONSE" | sed '/HTTP_STATUS:/d')
        
        echo "HTTP Status: $HTTP_STATUS"
        
        if [ "$HTTP_STATUS" != "200" ]; then
          echo "❌ AUTHENTICATION FAILED"
          echo "Response: $RESPONSE_BODY"
          echo ""
          echo "COMMON SOLUTIONS:"
          echo "1. Check if AUTH_URL is correct (from SAP service key uaa.url + /oauth/token)"
          echo "2. Verify CLIENT_ID and CLIENT_SECRET are exact copies from service key"
          echo "3. Ensure your SAP service key has not expired"
          echo "4. Check if your SAP account has proper permissions"
          exit 1
        fi
        
        ACCESS_TOKEN=$(echo "$RESPONSE_BODY" | jq -r '.access_token')
        echo "✅ Authentication successful!"
        
        # Continue with deployment...
        echo "Creating secrets and deploying..."
        # ... [rest of your deployment code]