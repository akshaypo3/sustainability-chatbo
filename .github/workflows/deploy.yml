name: Build & Deploy to SAP AI Core

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    # Checkout repo
    - name: Checkout repo
      uses: actions/checkout@v3

    # Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    # Log in to DockerHub
    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Build Docker image
    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/sustainability-chatbo:latest .

    # Push Docker image
    - name: Push Docker image
      run: |
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/sustainability-chatbo:latest

    # Install AI Core CLI - OFFICIAL SAP METHOD
    - name: Install AI Core CLI
      run: |
        echo "Installing SAP AI Core CLI using official method..."
        
        # Create the required directory structure
        sudo mkdir -p /usr/local/lib/aicore
        sudo chmod 755 /usr/local/lib/aicore
        
        # Download and install using SAP's recommended approach
        # This follows the pattern from SAP's official documentation
        curl -s https://storage.googleapis.com/sap-ai-core-sdk/public/install.sh | bash -s -- -d /usr/local/bin
        
        # Alternative direct download if the above fails
        if ! command -v aicore &> /dev/null; then
          echo "Trying alternative installation method..."
          curl -LO https://storage.googleapis.com/sap-ai-core-sdk/public/ai-core-cli-linux-amd64
          chmod +x ai-core-cli-linux-amd64
          sudo mv ai-core-cli-linux-amd64 /usr/local/bin/aicore
        fi
        
        # Verify installation
        if command -v aicore &> /dev/null; then
          echo "AI Core CLI installed successfully"
          # Try to get version (may fail without proper auth, but CLI is installed)
          aicore version || echo "CLI installed but version check requires login"
        else
          echo "AI Core CLI installation failed - using manual method"
          
          # Manual installation as last resort
          echo "Downloading CLI manually from SAP sources..."
          wget -q -O aicore-cli "https://api.github.com/repos/SAP/ai-core-sdk/releases/latest" | grep "browser_download_url.*linux-amd64" | cut -d '"' -f 4 | xargs -I {} wget -O aicore-cli {}
          
          if [ -f aicore-cli ]; then
            chmod +x aicore-cli
            sudo mv aicore-cli /usr/local/bin/aicore
            echo "Manual installation completed"
          else
            echo "Please download the CLI manually from SAP BTP Cockpit"
            echo "Visit: https://help.sap.com/docs/ai-core/ai-core-development-guide/command-line-interface-cli"
            exit 1
          fi
        fi

    # Create secrets in AI Core
    - name: Create Supabase Secret in AI Core
      run: |
        aicore secret create \
          --name supabase-secret \
          --data SUPABASE_URL=${{ secrets.SUPABASE_URL }} \
          --data SUPABASE_KEY=${{ secrets.SUPABASE_KEY }} \
          --label "ai.sap.com/resourcePlan=free"

    - name: Create Gemini Secret in AI Core
      run: |
        aicore secret create \
          --name gemini-secret \
          --data GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }} \
          --label "ai.sap.com/resourcePlan=free"

    # Create Docker registry secret
    - name: Create Docker Registry Secret
      run: |
        aicore secret create \
          --name docker-registry-secret \
          --type kubernetes.io/dockerconfigjson \
          --docker-server https://index.docker.io/v1/ \
          --docker-username ${{ secrets.DOCKERHUB_USERNAME }} \
          --docker-password ${{ secrets.DOCKERHUB_TOKEN }} \
          --label "ai.sap.com/resourcePlan=free"

    # Login to AI Core
    - name: Login to AI Core
      run: |
        aicore login \
          --url "${{ secrets.AI_API_URL }}" \
          --clientid "${{ secrets.CLIENT_ID }}" \
          --clientsecret "${{ secrets.CLIENT_SECRET }}" \
          --tokenurl "${{ secrets.AUTH_URL }}"

    # Push Workflow Template
    - name: Push Workflow Template
      run: |
        aicore workflow push -f sap_ai_core_deployment.yaml

    # Create Deployment
    - name: Create Deployment
      run: |
        aicore deployment create -f sap_ai_core_deployment.yaml

    # Get Deployment URL
    - name: Get Deployment URL
      run: |
        echo "Deployment status:"
        aicore deployment list
        echo -e "\nTo get the service URL, run: aicore service list"