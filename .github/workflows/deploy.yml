name: Build & Deploy to SAP AI Core

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout
      - name: Checkout repo
        uses: actions/checkout@v3

      # 2) Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3) Build Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/sustainability-chatbo:latest .

      # 4) Push Docker image
      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/sustainability-chatbo:latest

      # 5) Install tools
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl
          pip install --user ai-core-sdk

      # 6) Get OAuth token from SAP BTP (XSUAA)
      - name: Get AI Core OAuth Token
        id: get_token
        env:
          AUTH_URL: ${{ secrets.AUTH_URL }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        run: |
          response=$(curl -s -X POST "$AUTH_URL" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=client_credentials&client_id=$CLIENT_ID&client_secret=$CLIENT_SECRET")
          echo "Token response:"
          echo "$response" | jq .
          token=$(echo "$response" | jq -r '.access_token')
          if [ -z "$token" ] || [ "$token" = "null" ]; then
            echo "Failed to get access_token from AUTH_URL"; exit 1;
          fi
          echo "AICORE_TOKEN=$token" >> $GITHUB_ENV

      # 7) Debug - Check environment variables
      - name: Debug - Check variables
        env:
          AI_API_URL: ${{ secrets.AI_API_URL }}
          AICORE_TOKEN: ${{ env.AICORE_TOKEN }}
          RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP || 'default' }}
        run: |
          echo "AI_API_URL: $AI_API_URL"
          echo "RESOURCE_GROUP: $RESOURCE_GROUP"
          echo "AICORE_TOKEN length: ${#AICORE_TOKEN} characters"

      # 8) Validate AI Core API connectivity
      - name: Validate AI Core API connectivity
        env:
          AI_API_URL: ${{ secrets.AI_API_URL }}
          AICORE_TOKEN: ${{ env.AICORE_TOKEN }}
          RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP || 'default' }}
        run: |
          echo "Listing resource groups to validate connectivity..."
          curl -s -H "Authorization: Bearer $AICORE_TOKEN" \
               "$AI_API_URL/v2/resourceGroups" | jq .
          echo "Success. Your creds and API URL are valid."

      # 9) Create or update Configuration in SAP AI Core
      - name: Deploy Configuration to SAP AI Core
        env:
          AI_API_URL: ${{ secrets.AI_API_URL }}
          AICORE_TOKEN: ${{ env.AICORE_TOKEN }}
          RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP || 'default' }}
        run: |
          # Debug first
          echo "Using resource group: $RESOURCE_GROUP"
          
          # Create configuration.yaml using simple echo commands (no EOF issues)
          echo "apiVersion: ai.sap.com/v1alpha1" > configuration.yaml
          echo "kind: Configuration" >> configuration.yaml
          echo "metadata:" >> configuration.yaml
          echo "  name: sustainability-chatbot-config" >> configuration.yaml
          echo "  annotations:" >> configuration.yaml
          echo "    scenarios.ai.sap.com/name: \"chatbot-scenario\"" >> configuration.yaml
          echo "    executables.ai.sap.com/name: \"sustainability-chatbot-exec\"" >> configuration.yaml
          echo "  labels:" >> configuration.yaml
          echo "    ai.sap.com/resourceGroup: \"$RESOURCE_GROUP\"" >> configuration.yaml
          echo "spec:" >> configuration.yaml
          echo "  template:" >> configuration.yaml
          echo "    name: sustainability-chatbot-serving" >> configuration.yaml
          echo "  inputs:" >> configuration.yaml
          echo "    parameters:" >> configuration.yaml
          echo "      - name: image" >> configuration.yaml
          echo "        value: \"docker.io/${{ secrets.DOCKERHUB_USERNAME }}/sustainability-chatbo:latest\"" >> configuration.yaml
          echo "      - name: resourceGroup" >> configuration.yaml
          echo "        value: \"$RESOURCE_GROUP\"" >> configuration.yaml

          echo "Deploying to resource group: $RESOURCE_GROUP"
          response=$(curl -s -o response.txt -w "%{http_code}" -X POST \
            "$AI_API_URL/v2/lm/configurations?resourceGroup=$RESOURCE_GROUP" \
            -H "Authorization: Bearer $AICORE_TOKEN" \
            -H "Content-Type: application/yaml" \
            -H "AI-Resource-Group: $RESOURCE_GROUP" \
            --data-binary @configuration.yaml)
          
          echo "HTTP Status: $response"
          if [ -f response.txt ]; then
            cat response.txt
          fi
          
          if [ "$response" -eq 201 ] || [ "$response" -eq 200 ]; then
            echo "✅ Configuration deployed successfully!"
          else
            echo "❌ Failed to deploy configuration."
            exit 1
          fi

      # 10) Output deployment info
      - name: Print deployment information
        run: |
          echo "Deployment completed successfully!"
          echo "Container image: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/sustainability-chatbo:latest"
          echo "To test your deployment, use the SAP AI Core API with resourceGroup: ${{ secrets.RESOURCE_GROUP || 'default' }}"